services:
  app_backend:
    build:
      context: ./backend_php # Caminho para a pasta do backend
      dockerfile: Dockerfile   # Nome do Dockerfile dentro de ./backend_php
    ports:
      - "8000:80" # Mapeia a porta 8000 do host para a porta 80 do contêiner do backend
    volumes:
      - ./backend_php:/var/www/html # Monta o código do seu backend
    depends_on:
      - db # O backend depende do banco de dados para iniciar
    environment: # Variáveis de ambiente para o seu backend PHP se conectar ao DB
      DB_HOST: db # 'db' é o nome do serviço do banco de dados no Docker Compose
      DB_NAME: my_app_db
      DB_USER: user
      DB_PASSWORD: password

  # Serviço para o banco de dados MySQL
  db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: my_secure_root_password # Troque por uma senha forte!
      MYSQL_DATABASE: my_app_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306" # Opcional: para acessar o DB do host com ferramentas como DBeaver/MySQL Workbench
    volumes:
      - db_data:/var/lib/mysql # Volume persistente para os dados do DB
      # Como init.sql está na raiz da pasta sistema-usuarios:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql # Adicione esta linha se não tiver

  # Serviço para o seu frontend React (AGORA CORRETO PARA SUA ESTRUTURA)
  react_frontend:
    build:
      context: . # <--- CORRIGIDO: O contexto é o diretório atual (sistema-usuarios)
      dockerfile: Dockerfile # <--- Nome do Dockerfile (que está na raiz de sistema-usuarios)
    ports:
      - "3000:80" # Mapeia a porta 3000 do host para a porta 80 do Nginx no contêiner do frontend
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - app_backend # O frontend depende do backend para as chamadas de API
    environment:
      # Variável de ambiente para o React saber onde está seu backend
      REACT_APP_BACKEND_URL: http://app_backend:80

# Esta seção 'volumes' deve estar no mesmo nível de indentação que 'services:'
volumes:
  db_data: